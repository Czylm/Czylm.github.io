<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>欢迎回家~</title>
  
  <subtitle>保持初衷，砥砺前行</subtitle>
  <link href="https://czylm.github.io/atom.xml" rel="self"/>
  
  <link href="https://czylm.github.io/"/>
  <updated>2023-12-07T16:48:54.502Z</updated>
  <id>https://czylm.github.io/</id>
  
  <author>
    <name>Czylm</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>起床困难综合症</title>
    <link href="https://czylm.github.io/2023/12/07/%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/"/>
    <id>https://czylm.github.io/2023/12/07/%E8%B5%B7%E5%BA%8A%E5%9B%B0%E9%9A%BE%E7%BB%BC%E5%90%88%E7%97%87/</id>
    <published>2023-12-07T10:53:24.000Z</published>
    <updated>2023-12-07T16:48:54.502Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接">题目链接</h2><p><span class="math inline">\(--&gt;\)</span><a href="https://www.acwing.com/problem/content/1000/"> 传送门</a></p><h2 id="题目大意">题目大意</h2><p><span class="math inline">\(drd\)</span> 的防御战线由 <span class="math inline">\(n\)</span> 扇防御门组成。</p><p>每扇防御门包括一个运算 <span class="math inline">\(op\)</span>和一个参数 <span class="math inline">\(t\)</span>，其中运算一定是 <span class="math inline">\(OR,XOR,AND\)</span>中的一种，参数则一定为非负整数。如果还未通过防御门时攻击力为 <span class="math inline">\(x\)</span>，则其通过这扇防御门后攻击力将变为 <span class="math inline">\(x\)</span> <span class="math inline">\(op\)</span><span class="math inline">\(t\)</span>。</p><p>最终 <span class="math inline">\(drd\)</span>受到的伤害为对方初始攻击力 <span class="math inline">\(x\)</span>依次经过所有 <span class="math inline">\(n\)</span>扇防御门后转变得到的攻击力。</p><p>由于 <span class="math inline">\(atm\)</span>水平有限，他的初始攻击力只能为 <span class="math inline">\(0\)</span> 到<span class="math inline">\(m\)</span>之间的一个整数（即他的初始攻击力只能在 <span class="math inline">\(0,1,…,m\)</span>中任选，但在通过防御门之后的攻击力不受 <span class="math inline">\(m\)</span> 的限制）。</p><p>为了节省体力，他希望通过选择合适的初始攻击力使得他的攻击能让 <span class="math inline">\(drd\)</span>受到最大的伤害，请你帮他计算一下，他的一次攻击最多能使 <span class="math inline">\(drd\)</span> 受到多少伤害。</p><h2 id="输入样例">输入样例</h2><blockquote><p><span class="math inline">\(3\)</span> <span class="math inline">\(10\)</span> <br> <span class="math inline">\(AND\)</span> <span class="math inline">\(5\)</span> <br> <span class="math inline">\(OR\)</span> <span class="math inline">\(6\)</span><br> <span class="math inline">\(XOR\)</span> <span class="math inline">\(7\)</span></p></blockquote><h2 id="输出样例">输出样例</h2><blockquote><p><span class="math inline">\(1\)</span></p></blockquote><h2 id="思路">思路</h2><p>位运算的主要特点之一就是在二进制表示下不进位，因此，每一位是否为<span class="math inline">\(1\)</span> 是独立的。<strong><span class="math inline">\(ans\)</span> 的第 <span class="math inline">\(k\)</span> 位只与 <span class="math inline">\(x_o\)</span> 的第 <span class="math inline">\(k\)</span> 位有关。</strong></p><p><strong>由此，我们从高位到低位依次考虑每一位填 <span class="math inline">\(1\)</span> 还是 <span class="math inline">\(0\)</span>。</strong></p><p>这相当于在 <span class="math inline">\(m\)</span>范围内造出一个符合条件的最大数字 <span class="math inline">\(ans\)</span>，这就要 <span class="math inline">\(ans\)</span> 的每一位尽可能的为 <span class="math inline">\(1\)</span>。而满足填 <span class="math inline">\(1\)</span>的条件则是，<strong>已经填好更高位构成的数值加上当前第 <span class="math inline">\(k\)</span> 位的 <span class="math inline">\(1&lt;&lt; k\)</span> 不超过 <span class="math inline">\(m\)</span>，同时当前位置放 <span class="math inline">\(1\)</span> 的贡献大于放 <span class="math inline">\(0\)</span> 的</strong></p><h2 id="代码">代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">pair&lt;string,<span class="type">int</span>&gt; a[N];</span><br><span class="line"><span class="type">int</span> m,n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">int</span> bit,<span class="type">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n ; i ++)&#123;</span><br><span class="line"><span class="type">int</span> x = a[i].second &gt;&gt; bit &amp; <span class="number">1</span>;</span><br><span class="line">string str = a[i].first;</span><br><span class="line"><span class="keyword">if</span>(str == <span class="string">&quot;AND&quot;</span>) now &amp;= x;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(str == <span class="string">&quot;OR&quot;</span>) now |= x;</span><br><span class="line"><span class="keyword">else</span> now ^= x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;  i &lt;= n; i ++)&#123;</span><br><span class="line">string s;<span class="type">int</span> x;</span><br><span class="line">cin &gt;&gt; s &gt;&gt; x;</span><br><span class="line">a[i] = &#123;s,x&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> val = <span class="number">0</span>,ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span> ; i --)&#123;</span><br><span class="line"><span class="type">int</span> res1 = <span class="built_in">cal</span>(i,<span class="number">1</span>),res0 = <span class="built_in">cal</span>(i,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(val + (<span class="number">1</span> &lt;&lt; i) &lt;= m &amp;&amp; res0 &lt; res1)&#123;</span><br><span class="line">ans += res1 &lt;&lt; i,val += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> ans += res0 &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目链接&quot;&gt;题目链接&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;math inline&quot;&gt;&#92;(--&amp;gt;&#92;)&lt;/span&gt;
&lt;a href=&quot;https://www.acwing.com/problem/content/1000/&quot;&gt; 传送门&lt;/a&gt;&lt;/p&gt;</summary>
      
    
    
    
    <category term="算法竞赛" scheme="https://czylm.github.io/categories/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B/"/>
    
    
    <category term="二进制状态压缩" scheme="https://czylm.github.io/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%8A%B6%E6%80%81%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人博客攻略</title>
    <link href="https://czylm.github.io/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/"/>
    <id>https://czylm.github.io/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/</id>
    <published>2023-12-07T06:16:42.000Z</published>
    <updated>2023-12-07T16:50:40.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="碎碎念">碎碎念</h2><p>从大一开始就一直想搭建自己的一个博客网站，但是直到现在才付诸行动，以此篇文章纪念一下。</p><h2 id="一下载git-和-node.js">一、下载<span class="math inline">\(git\)</span> 和 <span class="math inline">\(Node.js\)</span></h2><p><a href="https://nodejs.org/en/"> <span class="math inline">\(Node.js\)</span> 传送门</a></p><p><a href="https://git-scm.com/"> <span class="math inline">\(git\)</span> 传送门</a></p><h2 id="二安装hexo">二、安装<span class="math inline">\(hexo\)</span></h2><h3 id="在非-c-盘新建一个文件夹-blog右键打开-git-bash"><span class="math inline">\(1.\)</span>在非 <span class="math inline">\(C\)</span> 盘新建一个文件夹 <span class="math inline">\(blog\)</span>，右键打开 <span class="math inline">\(git bash\)</span></h3><p><img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image.png"></p><p>输入 &gt;npm install hexo-cli -g npm install hexo-deployer-git--save//部署插件，hexo d需要用到</p><h3 id="在-git-创建文件-hexo"><span class="math inline">\(2.\)</span>在<span class="math inline">\(git\)</span> 创建文件 hexo</h3><blockquote><p>mkdir hexo</p></blockquote><h3 id="hexo初始化"><span class="math inline">\(3.\)</span>hexo初始化</h3><blockquote><p>hexo init</p></blockquote><h3 id="在-vscode-打开文件-hexo-的-_config"><span class="math inline">\(4.\)</span>在 <span class="math inline">\(vscode\)</span> 打开文件 <span class="math inline">\(hexo\)</span> 的 <span class="math inline">\(_config\)</span></h3><p><img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image-1.png"></p><h3 id="打开-_config划到最下面修改-repo"><span class="math inline">\(5.\)</span>打开 _<span class="math inline">\(config\)</span>，划到最下面，修改 <span class="math inline">\(repo\)</span></h3><blockquote><p>deploy: type: '' repo:git@github.com:你的用户名/你的用户名.github.io.git branch: master</p></blockquote><h3 id="右键-hexo-文件用-git-打开输入"><span class="math inline">\(6.\)</span>右键 <span class="math inline">\(hexo\)</span> 文件用 <span class="math inline">\(git\)</span> 打开，输入</h3><blockquote><p>hexo s</p></blockquote><p>本地加载完成 <img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image-2.png"></p><h2 id="三配置-git">三、配置 <span class="math inline">\(git\)</span></h2><h3 id="在-git-新建库注意格式"><span class="math inline">\(1.\)</span>在<span class="math inline">\(git\)</span> 新建库，注意格式</h3><p><img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image-4.png"></p><p>命名成 &gt; 你的用户名.github.io &gt; ### <span class="math inline">\(2.\)</span>然后在 <span class="math inline">\(git\)</span> 上输入 &gt;git config --globaluser.name "你的Github用户名" git config --global user.email"你的Github邮箱"</p><h3 id="生成密钥"><span class="math inline">\(3.\)</span>生成密钥</h3><blockquote><p>ssh-keygen -t rsa -C "你的Github邮箱"</p></blockquote><h3 id="查看密钥"><span class="math inline">\(4.\)</span>查看密钥</h3><blockquote><p>cat ~/.ssh/id_rsa.pub</p></blockquote><h3 id="复制粘贴到-github-里的-ssh"><span class="math inline">\(5.\)</span>复制粘贴到 <span class="math inline">\(github\)</span> 里的 <span class="math inline">\(SSH\)</span></h3><p><img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image-3.png"></p><h3 id="建立连接"><span class="math inline">\(6.\)</span>建立连接</h3><blockquote><p>ssh -T git@github.com</p></blockquote><p>出现 &gt;Hi xxx! You've successfully authenticated...</p><p>则成功链接</p><h3 id="在hexo打开的-git-上输入"><span class="math inline">\(7.\)</span>在hexo打开的 <span class="math inline">\(git\)</span> 上输入</h3><blockquote><p>hexo clean hexo g hexo d 出现如图 <img src="/2023/12/07/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%94%BB%E7%95%A5/image-5.png"></p></blockquote><p>等待一会，博客建立</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;碎碎念&quot;&gt;碎碎念&lt;/h2&gt;
&lt;p&gt;从大一开始就一直想搭建自己的一个博客网站，但是直到现在才付诸行动，以此篇文章纪念一下。&lt;/p&gt;
&lt;h2 id=&quot;一下载git-和-node.js&quot;&gt;一、下载&lt;span class=&quot;math inline&quot;&gt;&#92;(git&#92;)&lt;/</summary>
      
    
    
    
    <category term="技术开发搭建" scheme="https://czylm.github.io/categories/%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="技术" scheme="https://czylm.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>白华</title>
    <link href="https://czylm.github.io/2023/12/06/%E7%99%BD%E5%8D%8E/"/>
    <id>https://czylm.github.io/2023/12/06/%E7%99%BD%E5%8D%8E/</id>
    <published>2023-12-06T13:31:37.000Z</published>
    <updated>2023-12-08T11:17:23.107Z</updated>
    
    <content type="html"><![CDATA[<p>以我的笔名 叙述新开始</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以我的笔名 叙述新开始&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
